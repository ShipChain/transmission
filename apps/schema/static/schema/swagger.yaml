openapi: 3.0.0
servers:
- url: https://transmission.shipchain.io
  description: ShipChain Transmission API
info:
  version: 1.0.0
  title: ShipChain Transmission API
  description: |
    The ShipChain Transmission API is a microservice developed to provide a traditional REST abstraction for interactions with
    the Ethereum smart contract platform. Transmission facilitates the reliable submission and retrying of asynchronous
    transactions sent to the ShipChain Ethereum smart contracts. Transmission is also responsible for the implementation
    of the Shipment-related business logic required for the ShipChain Portal and AXLE Gateway projects.
    # Data Format
    All response payloads will be formatted using the [JSON API](http://jsonapi.org) specification.
    Requests can be made to Transmission using `application/json`, `application/vnd.api+json`, and `multipart/form-data`,
    formatted as documented below.
    # Errors
    The API uses standard HTTP status codes and the [JSON API](http://jsonapi.org/examples/#error-objects) specification to indicate the success or failure of the API call. The body of the response will be JSON in the following format:
    ```
    {
      "errors": [
        {
          "status": "422",
          "source": { "pointer": "/data/attributes/volume" },
          "detail": "Volume does not, in fact, go to 11.",
          "code": "unprocessable_entity"
        }
      ]
    }
    ```
  x-logo:
    url: '/static/schema/shipchain-logo.png'

paths:
  /api/v1/shipments:
    $ref: components/shipments/shipments.yaml

  /api/v1/shipments/{shipment_id}:
    $ref: components/shipments/shipmentId.yaml

  /api/v1/shipments/{shipment_id}/actions:
    $ref: components/shipments/actions.yaml

  /api/v1/shipments/{shipment_id}/documents:
    $ref: components/documents/documents.yaml

  /api/v1/shipments/{shipment_id}/documents/{document_id}:
    $ref: components/documents/documentId.yaml

  /api/v1/shipments/{shipment_id}/notes:
    $ref: components/shipmentNotes/notes.yaml

  /api/v1/shipments/{shipment_id}/notes/{shipment_note_id}:
    $ref: components/shipmentNotes/noteId.yaml

  /api/v1/shipments/{shipment_id}/tags:
    $ref: components/shipmentTags/tags.yaml

  /api/v1/shipments/{shipment_id}/tags/{shipment_tag_id}:
    $ref: components/shipmentTags/tagsId.yaml

  /api/v1/shipments/overview:
    $ref: components/shipmentsOverview/status.yaml

  /api/v1/shipments/{shipment_id}/permission_links:
    $ref: components/permissionLinks/permissionLinks.yaml

  /api/v1/shipments/{shipment_id}/permission_links/{permission_link_id}:
    $ref: components/permissionLinks/permissionLinksId.yaml

  /api/v1/shipments/{shipment_id}/transactions:
    $ref: components/shipments/transactions.yaml

  /api/v1/shipments/{shipment_id}/tracking:
    $ref: components/shipments/tracking.yaml

  /api/v1/shipments/{shipment_id}/telemetry:
    $ref: components/shipments/telemetry.yaml

  /api/v1/shipments/{shipment_id}/history:
    $ref: components/shipmentHistory/shipmentHistory.yaml

  /api/v1/jobs:
    $ref: components/jobs/jobs.yaml

  /api/v1/jobs/{job_id}:
    $ref: components/jobs/jobId.yaml

  /api/v1/transactions:
    $ref: components/transactions/transactions.yaml

  /api/v1/transactions/{transaction_hash}:
    $ref: components/transactions/transactionHash.yaml

  /api/v1/devices/{device_id}/sensors:
    $ref: components/sensors/sensor.yaml

  /api/v1/devices/{device_id}/tracking:
    $ref: components/devices/deviceTracking.yaml

  /api/v1/devices/{device_id}/telemetry:
    $ref: components/devices/deviceTelemetry.yaml

  /api/v1/imports/shipments:
    $ref: components/shipmentImports/shipmentImports.yaml

  /api/v1/imports/shipments/{shipment_import_id}:
    $ref: components/shipmentImports/shipmentImportsId.yaml

  /api/v1/routes:
    $ref: components/routes/route.yaml

  /api/v1/routes/{route_id}:
    $ref: components/routes/routeId.yaml

  /api/v1/routes/{route_id}/legs:
    $ref: components/routeLegs/routeLeg.yaml

  /api/v1/routes/{route_id}/legs/{route_leg_id}:
    $ref: components/routeLegs/routeLegId.yaml

components:
  securitySchemes:
    $ref: components/securitySchemes.yaml

x-tagGroups:
  - name: Shipment Management
    tags:
      - Shipments
      - Shipment Tags
      - Notes
      - Permission Links
      - Additional Shipment Details
  - name: Devices
    tags:
      - Devices
  - name: Routes
    tags:
      - Routes
      - Route Legs
  - name: Imports
    tags:
      - Imports
  - name: Documents
    tags:
      - Documents
  - name: AsyncJobs
    tags:
      - AsyncJobs
  - name: Transactions
    tags:
      - Transactions
security:
- JWT: []
tags:
- name: AsyncJobs
  description: >
    AsyncJobs model an asynchronous interaction with ShipChain Engine. They also contain references to the state of an associated Ethereum Transaction.
- name: Documents
  description: >
    Documents are entities that allow documents and media objects management within ShipChain Transmission service.
- name: Imports
  description: >
    Imports are entities that allow creation or import of Transmission objects from external sources within ShipChain Transmission service.
- name: Notes
  description: >
    Notes allow for a timestamped comment to be added to a shipment
- name: Permission Links
  description: >
    Permission Links are entities that allow for retrieval of shipment data by unauthenticated or non-owner users
- name: Shipment Tags
  description: >
    Shipment Tags are a mechanism to allow for easier filtering of shipments
- name: Additional Shipment Details
  description: >
    These endpoints contain additional details about a shipment, such as transmission, telemetry, history and transactions
- name: Devices
  description: >
    These handle the posting of telemetry and tracking data from devices for shipments
- name: Shipments
  description: >
    Shipments are the core entity in the ShipChain Transmission service. This is a collection of endpoints related to managing shipments.
- name: Routes
  description: >
    Routes are a collection of shipments that will be in transit together.
- name: Route Legs
  description: >
    Route Legs are individual Shipments included in a Route
- name: Transactions
  description: >
    Transaction entities contain read-only data about Ethereum Transactions and Transaction Receipts.
