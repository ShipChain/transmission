# Generated by Django 3.0.8 on 2020-10-08 22:05

import apps.eth.fields
import django.core.validators
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django_extensions.db.fields.json
import shipchain_common.utils


class Migration(migrations.Migration):

    replaces = [('eth', '0001_squashed_091919'), ('eth', '0002_nullable_fields'), ('eth', '0003_deduplicate_events'), ('eth', '0004_event_unique_constraint'), ('eth', '0005_transactionreceipt_evm_hash')]

    initial = True

    dependencies = [
        ('shipments', '0001_squashed_091919'),
        ('jobs', '0001_squashed_091919'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='EthAction',
            fields=[
                ('transaction_hash', apps.eth.fields.HashField(default='', max_length=66, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(message='Invalid hash.', regex='^0x([A-Fa-f0-9]{64})$')])),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('async_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobs.AsyncJob')),
                ('shipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shipments.Shipment')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.CharField(default=shipchain_common.utils.random_id, max_length=36, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('address', apps.eth.fields.AddressField(default='0x0', max_length=42, validators=[django.core.validators.RegexValidator(message='Invalid address.', regex='^0x([A-Fa-f0-9]{40})$')])),
                ('block_number', models.BigIntegerField()),
                ('transaction_hash', apps.eth.fields.HashField(default='', max_length=66, validators=[django.core.validators.RegexValidator(message='Invalid hash.', regex='^0x([A-Fa-f0-9]{64})$')])),
                ('transaction_index', models.IntegerField()),
                ('block_hash', apps.eth.fields.HashField(default='', max_length=66, validators=[django.core.validators.RegexValidator(message='Invalid hash.', regex='^0x([A-Fa-f0-9]{64})$')])),
                ('log_index', models.IntegerField()),
                ('removed', models.BooleanField()),
                ('event_id', models.CharField(max_length=514)),
                ('return_values', django_extensions.db.fields.json.JSONField(default=dict)),
                ('event_name', models.CharField(max_length=514)),
                ('signature', apps.eth.fields.HashField(default='', max_length=66, validators=[django.core.validators.RegexValidator(message='Invalid hash.', regex='^0x([A-Fa-f0-9]{64})$')])),
                ('raw', django_extensions.db.fields.json.JSONField(default=dict)),
                ('eth_action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='eth.EthAction')),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('eth_action', models.OneToOneField(db_column='hash', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='eth.EthAction')),
                ('nonce', models.CharField(max_length=32)),
                ('to_address', apps.eth.fields.AddressField(default='0x0', max_length=42, validators=[django.core.validators.RegexValidator(message='Invalid address.', regex='^0x([A-Fa-f0-9]{40})$')])),
                ('value', models.CharField(max_length=32)),
                ('gas_limit', models.CharField(max_length=32)),
                ('gas_price', models.CharField(max_length=32)),
                ('data', models.TextField()),
                ('chain_id', models.BigIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='TransactionReceipt',
            fields=[
                ('block_hash', apps.eth.fields.HashField(default='', max_length=66, null=True, validators=[django.core.validators.RegexValidator(message='Invalid hash.', regex='^0x([A-Fa-f0-9]{64})$')])),
                ('block_number', models.BigIntegerField(null=True)),
                ('contract_address', apps.eth.fields.AddressField(default='0x0', max_length=42, null=True, validators=[django.core.validators.RegexValidator(message='Invalid address.', regex='^0x([A-Fa-f0-9]{40})$')])),
                ('cumulative_gas_used', models.IntegerField(null=True)),
                ('from_address', apps.eth.fields.AddressField(default='0x0', max_length=42, validators=[django.core.validators.RegexValidator(message='Invalid address.', regex='^0x([A-Fa-f0-9]{40})$')])),
                ('gas_used', models.IntegerField(null=True)),
                ('logs', django_extensions.db.fields.json.JSONField(default=dict, null=True)),
                ('logs_bloom', models.CharField(max_length=514, null=True)),
                ('status', models.BooleanField(null=True)),
                ('to_address', apps.eth.fields.AddressField(default='0x0', max_length=42, null=True, validators=[django.core.validators.RegexValidator(message='Invalid address.', regex='^0x([A-Fa-f0-9]{40})$')])),
                ('eth_action', models.OneToOneField(db_column='transaction_hash', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='eth.EthAction')),
                ('transaction_index', models.IntegerField(null=True)),
            ],
        ),
        migrations.AddConstraint(
            model_name='event',
            constraint=models.UniqueConstraint(fields=('eth_action', 'log_index'), name='unique event'),
        ),
        migrations.AddField(
            model_name='transactionreceipt',
            name='evm_hash',
            field=apps.eth.fields.HashField(default='', max_length=66, null=True, validators=[django.core.validators.RegexValidator(message='Invalid hash.', regex='^0x([A-Fa-f0-9]{64})$')]),
        ),
    ]
